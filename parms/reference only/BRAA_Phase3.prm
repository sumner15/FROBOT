Visualize:Property%20Sets matrix VisPropertySets= 0 1 // row titles are properties in the form "SRCD.Left", columns are property sets
System:Configuration matrix OperatorVersion= { Framework Revision Build } 1 3.0.5 % Apr%2023%202014%2011:39:24 // operator module version information
System:Additional%20Connections int OperatorBackLink= 1 1 0 1 // Send final state and signal information to Operator (boolean)
Source:Signal%20Properties:DataIOFilter int SourceCh= 16 16 1 % // number of digitized and stored channels
Source:Signal%20Properties:DataIOFilter int SampleBlockSize= 8 32 1 % // number of samples transmitted at a time
Source:Signal%20Properties:DataIOFilter int SamplingRate= 512 256Hz 1 % // sample rate
Source:Signal%20Properties:DataIOFilter list ChannelNames= 16 F3 Fz F4 T7 C3 Cz C4 T8 CP3 CP4 P3 Pz P4 PO7 PO8 Oz // list of channel names
Source:Signal%20Properties:DataIOFilter floatlist SourceChOffset= 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 % % // Offset for channels in A/D units
Source:Signal%20Properties:DataIOFilter floatlist SourceChGain= 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.003 % % // gain for each channel (A/D units -> muV)
Storage:Data%20Location:DataIOFilter string DataDirectory= ..\data ..\data % % // path to top level data directory (directory)
Storage:Session:DataIOFilter string SubjectName= BRAA Name % % // subject alias
Storage:Session:DataIOFilter string SubjectSession= 11 001 % % // three-digit session number
Storage:Session:DataIOFilter string SubjectRun= 00 00 % % // two-digit run number
Storage:Documentation:DataIOFilter string ID_System= % // BCI2000 System Code
Storage:Documentation:DataIOFilter string ID_Amp= % // BCI2000 Amp Code
Storage:Documentation:DataIOFilter string ID_Montage= % // BCI2000 Cap Montage Code
Visualize:Timing:DataIOFilter int VisualizeTiming= 1 1 0 1 // visualize system timing (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 1 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceDecimation= auto auto % % // decimation factor for raw brain signal
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceBufferSize= auto auto % % // number of blocks to aggregate before sending to operator
Visualize:Source%20Signal:DataIOFilter int VisualizeSourceTime= 2s 2s 0 % // how much time in Source visualization
Visualize:Source%20Signal:DataIOFilter int SourceMin= -100muV -100muV % % // raw signal vis Min Value
Visualize:Source%20Signal:DataIOFilter int SourceMax= 100muV 100muV % % // raw signal vis Max Value
Source:gUSBampADC intlist SourceChList= 16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 1 128 // list of channels to digitize
Source:gUSBampADC intlist SourceChDevices= 1 16 16 1 17 // number of digitized channels per device
Source:gUSBampADC int NumBuffers= 2 1 2 32 // number of software buffers to use
Source:gUSBampADC string DeviceIDMaster= auto // deviceID for the device whose SYNC goes to the slaves
Source:gUSBampADC int FilterEnabled= 1 1 0 1 // Enable pass band filter (0=no, 1=yes)
Source:gUSBampADC float FilterHighPass= 0.5 0.1 0 50 // high pass filter for pass band
Source:gUSBampADC float FilterLowPass= 60 60 0 4000 // low pass filter for pass band
Source:gUSBampADC int FilterModelOrder= 8 8 1 12 // filter model order for pass band
Source:gUSBampADC int FilterType= 1 1 1 2 // filter type for pass band (1=BUTTERWORTH, 2=CHEBYSHEV)
Source:gUSBampADC int NotchEnabled= 1 1 0 1 // Enable notch (0=no, 1=yes)
Source:gUSBampADC float NotchHighPass= 58 58 0 70 // high pass filter for notch filter
Source:gUSBampADC float NotchLowPass= 62 62 0 4000 // low pass filter for notch filter
Source:gUSBampADC int NotchModelOrder= 4 4 1 10 // filter model order for notch filter
Source:gUSBampADC int NotchType= 1 1 1 2 // filter type for pass band (1=CHEBYSHEV, 2=BUTTERWORTH)
Source:gUSBampADC list DeviceIDs= 1 auto // list of USBamps to be used (or auto)
Source:gUSBampADC int DigitalInput= 0 0 0 1 // enable digital input:  0: false, 1: true (enumeration)
Source:gUSBampADC int DigitalOutput= 0 0 0 1 // enable digital output on block acquisition (boolean)
Source:gUSBampADC string DigitalOutputEx= % // expression for output on digital output 2 (expression)
Source:gUSBampADC int SignalType= 1 0 0 1 // numeric type of output signal:  0: int16, 1: float32 (enumeration)
Source:gUSBampADC int AcquisitionMode= 0 0 0 2 // data acquisition mode:  0: analog signal acquisition, 1: calibration, 2: impedance (enumeration)
Source:gUSBampADC int CommonGround= 1 0 0 1 // internally connect GNDs from all blocks:  0: false, 1: true (enumeration)
Source:gUSBampADC int CommonReference= 1 0 0 1 // internally connect Refs from all blocks:  0: false, 1: true (enumeration)
Storage:Documentation:BCI2000FileWriter string StorageTime= % // time of beginning of data storage
Source:Alignment:AlignmentFilter int AlignChannels= 0 0 0 1 // align channels in time (0=no, 1=yes)
Source:Alignment:AlignmentFilter floatlist SourceChTimeOffset= 0 0 % % // time offsets for all source channels (may be empty)
Source:Online%20Processing:TransmissionFilter list TransmitChList= 4 2 5 6 12 // list of transmitted channels
System:Additional%20Connections:EventLink int EventLink= 1 1 0 1 // Send events from Operator to Source module (boolean)
System:Core%20Connections string OperatorIP= 127.0.0.1 127.0.0.1 % % // the Operator module's IP
System:Core%20Connections string SignalSourcePort= 61982 4200 1024 65535 // the SignalSource module's listening port
System:Core%20Connections string SignalSourceIP= 129.101.53.72 127.0.0.1 % % // the SignalSource module's listening IP
System:Configuration matrix SignalSourceVersion= { Framework Revision Build } 1 3.0.5 % Nov%2010%202015%2014:18:25 // SignalSource version information
System:Configuration matrix SignalSourceFilterChain= 8 { Filter%20Name Position%20String } DataIOFilter 0 gUSBampADC 1 NullFileWriter 1 BCI2000FileWriter 1 EDFFileWriter 1 GDFFileWriter 1 AlignmentFilter 1.1 TransmissionFilter 1.2 // SignalSource filter chain
Visualize:Processing%20Stages int VisualizeAlignmentFilter= 0 0 0 1 // Visualize AlignmentFilter output (boolean)
Visualize:Processing%20Stages int VisualizeTransmissionFilter= 0 0 0 1 // Visualize TransmissionFilter output (boolean)
Filtering:SpatialFilter int SpatialFilterType= 1 2 0 3 // spatial filter type 0: none, 1: full matrix, 2: sparse matrix, 3: common average reference (CAR) (enumeration)
Filtering:SpatialFilter:SpatialFilter matrix SpatialFilter= { Fz-C3 Cz-C3 Pz-C3 } 4 1 -1 0 0 0 -1 1 0 0 -1 0 1 0 % % // columns represent input channels, rows represent output channels
Filtering:SpatialFilter:SpatialFilter intlist SpatialFilterCAROutput= 0 // when using CAR filter type: list of output channels, or empty for all channels
Filtering:SpatialFilter:SpatialFilter int SpatialFilterMissingChannels= 0 0 0 1 // how to handle missing channels 0: ignore, 1: report error (enumeration)
Filtering:Spectral%20Estimation:ARThread float FirstBinCenter= 0Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float LastBinCenter= 50Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float BinWidth= 3Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering:Spectral%20Estimation:ARThread int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
Filtering:AR%20Spectral%20Estimator:ARThread int ModelOrder= 32 16 0 % // AR model order
Filtering:AR%20Spectral%20Estimator:ARThread int EvaluationsPerBin= 15 15 1 % // Number of uniformly spaced evaluation points entering into a single bin value
Filtering:Windowing:WindowingThread int WindowLength= 0.5s 0.5s % % // Length of window
Filtering:Windowing:WindowingThread int Detrend= 2 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing:WindowingThread int WindowFunction= 0 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:LinearClassifier matrix Classifier= 3 { input%20channel input%20element%20(bin) output%20channel weight } Pz-C3 12Hz 1 0.4 Pz-C3 18Hz 1 0.7 Pz-C3 21Hz 1 1.7 // Linear classification matrix in sparse representation
Filtering:LPFilter float LPTimeConstant= 0.1s 16s 0 % // time constant for the low pass filter
Filtering:ExpressionFilter string StartRunExpression= % // expression executed on StartRun
Filtering:ExpressionFilter string StopRunExpression= % // expression executed on StopRun
Filtering:ExpressionFilter matrix Expressions= 0 1 // expressions used to compute the output of the ExpressionFilter (rows are channels; empty matrix for none)
Filtering:Normalizer floatlist NormalizerOffsets= 3 2.09129 0 0 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 3 1.92782 0 0 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 3 2 0 0 0 0 2 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance (enumeration)
Filtering:Normalizer matrix BufferConditions= 2 1 (TaskState3==1)&&(Feedback==0) (TaskState3==1)&&(Feedback==0) // expressions corresponding to data buffers (columns correspond to output channels, multiple rows correspond to multiple buffers)
Filtering:Normalizer float BufferLength= 12s 9s % % // time window of past data per buffer that enters into statistic
Filtering:Normalizer string UpdateTrigger= (Feedback==1) // expression to trigger offset/gain update when changing from 0 (use empty string for continuous update)
System:Core%20Connections string SignalProcessingPort= 61984 4200 1024 65535 // the SignalProcessing module's listening port
System:Core%20Connections string SignalProcessingIP= 129.101.53.72 127.0.0.1 % % // the SignalProcessing module's listening IP
System:Configuration matrix SignalProcessingVersion= { Framework Revision Build } 1 3.0.5 % Mar%2016%202015%2013:46:16 // SignalProcessing version information
System:Configuration matrix SignalProcessingFilterChain= 6 { Filter%20Name Position%20String } SpatialFilter 2.B ARFilter 2.C LinearClassifier 2.D LPFilter 2.D1 ExpressionFilter 2.D2 Normalizer 2.E // SignalProcessing filter chain
Visualize:Processing%20Stages int VisualizeSpatialFilter= 0 0 0 1 // Visualize SpatialFilter output (boolean)
Visualize:Processing%20Stages int VisualizeARFilter= 0 0 0 1 // Visualize ARFilter output (boolean)
Visualize:Processing%20Stages int VisualizeLinearClassifier= 0 0 0 1 // Visualize LinearClassifier output (boolean)
Visualize:Processing%20Stages int VisualizeExpressionFilter= 0 0 0 1 // Visualize ExpressionFilter output (boolean)
Visualize:Processing%20Stages int VisualizeLPFilter= 0 0 0 1 // Visualize LPFilter output (boolean)
Visualize:Processing%20Stages int VisualizeNormalizer= 0 0 0 1 // Visualize Normalizer output (boolean)
Connector:ConnectorInput list ConnectorInputFilter= 0 // list of state names or signal elements to allow, "*" for any, signal elements as in "Signal(1,0)"
Connector:ConnectorInput string ConnectorInputAddress= % localhost:20320 % % // IP address/port to read from, e.g. localhost:20320
Visualize:Application%20Log:ApplicationBase int ShowAppLog= 1 0 0 1 // Show application log window (boolean)
Application:Sequencing:FeedbackTask float PreRunDuration= 10s 2s 0 % // duration of pause preceding first trial
Application:Sequencing:FeedbackTask float PreFeedbackDuration= 4s 2s 0 % // duration of target display prior to feedback
Application:Sequencing:FeedbackTask float FeedbackDuration= 5s 3s 0 % // duration of feedback
Application:Sequencing:FeedbackTask float PostFeedbackDuration= 1s 1s 0 % // duration of result display after feedback
Application:Sequencing:FeedbackTask float ITIDuration= 2.5s 1s 0 % // duration of inter-trial interval
Application:Sequencing:FeedbackTask float MinRunLength= 180s 120s 0 % // minimum duration of a run; if blank, NumberOfTrials is used
Application:Sequencing:FeedbackTask int NumberOfTrials= % 0 0 % // number of trials; if blank, MinRunLength is used
Application:Targets:FeedbackTask int NumberTargets= 2 2 0 255 // number of targets
Application:Targets:FeedbackTask intlist TargetSequence= 0 1 % % // fixed sequence in which targets should be presented (leave empty for random)
Application:Window:FingerTask int WindowWidth= 1600 640 0 % // width of application window
Application:Window:FingerTask int WindowHeight= 900 480 0 % // height of application window
Application:Window:FingerTask int WindowLeft= 1920 0 % % // screen coordinate of application window's left edge
Application:Window:FingerTask int WindowTop= 180 0 % % // screen coordinate of application window's top edge
Application:Cursor:FingerTask int CursorColor= 0xFFFF00 0xFF0000 % % // feedback cursor color (color)
Application:Cursor:FingerTask float CursorWidth= 12 5 0.0 % // feedback cursor width in percent of screen width
Application:Cursor:FingerTask int CursorNumber= 2 2 1 3 // feedback cursor width in percent of screen width
Application:Task:FingerTask int TaskPhase= 3 1 1 3 // Phase of Finger Task 
Application:Task:FingerTask int NullTargetMode= 1 1 0 1 // if 1 then Blue target is NULL (not shown) 
Application:Task:FingerTask int MinAccTime= 1.5s 1s 0 % // minimum time to accumulate EEG 
Application:Task:FingerTask float LowAdjust= 0.0040 0.0040 0.00 0.10 // increment on miss 
Application:Task:FingerTask float HighAdjust= 0.0080 0.0080 0.00 0.10 // decrement on hit 
Application:Task:FingerTask float AccLow= -0.504458 -0.4 -2.0 2.0 // low value for transition 
Application:Task:FingerTask float AccHigh= 0.705462 0.4 -2.0 2.0 // high value for transition 
Application:Task:FingerTask int AccControl= 2 2 1 2 // 1 Running Average of EEG  2 Cumulative EEG 
Application:Task:FingerTask int Min4Move= -30 0 -100 100 // Minimum finger position change for a response 
Application:Task:FingerTask int Max4NotMove= -15 0 -100 100 // Maximum finger position change for no response 
Application:Task:FingerTask int DisplayScore= 1 0 0 1 // 1 to Display Score Statistics 
Robot:Location:FingerTask string FRobotAdr= 129.101.53.73 // FRobot IP address
Robot:Location:FingerTask string FRobotCOMport= 22222 // FRobot COM port
Robot:Location:FingerTask string modelName= brainFINGER // FingerRobot model name
Robot:Assist:FingerTask int FRobotMove= 1 0 0 2 // Assist?  0= none 1= yes no errors 2= yes allow errors 
Robot:Assist:FingerTask float Kp= 2.0 2.0 0 2.0 // PD movement proportional error gain 
Robot:Assist:FingerTask float Kd= 0.2 0.2 0 0.2 // PD movement differential error gain 
Robot:Assist:FingerTask float MovementDelay= 0.2 0 0 2.0 // Delay of movement (msec) after colored targets 
Robot:Assist:FingerTask float MovementDuration= 0.7 0 0 2.0 // Total Possible duration (sec) of movement 
Robot:Assist:FingerTask float MaxTrajDur= 4.9 0 0 5.0 // Maximum duration (sec) of movement 
Robot:Assist:FingerTask float POSinitial= 1.0 0.9 0.0 1.0 // starting and ending robot positions 
Robot:Assist:FingerTask float POSmov2= 0.05 0.0 0.0 1.0 // position to move to 
Robot:Assist:FingerTask float VThresh= 0.1 0.0 0.0 5.0 // velocity threshold for movement 
Robot:Assist:FingerTask float FThresh= 2.0 0.0 0.0 5.0 // force threshold for movement 
Robot:Assist:FingerTask float FRMode= 4.0 1.0 1.0 4.0 // 1 user initiated with return 2 autostart return 3 auto no return 4 user initiated no return 
Robot:Positions:FingerTask int AutoReturn= 1 1 0 1 // 0 no supplemental autoreturn
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeStateName= % // State to be translated into keystrokes (0-F), empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpression= % // Expression that evaluates to a virtual keycode, empty for off
Application:Human%20Interface%20Devices:KeystrokeFilter string KeystrokeExpressionOnStartRun= % // Expression that initializes expression variables on StartRun
Connector:ConnectorOutput string ConnectorOutputAddress= % localhost:20321 % % // one or more IP:Port combinations, e.g. localhost:20321
Application:Localization:Localization string Language= Default Default % % // Language for user messages
Application:Localization:Localization matrix LocalizedStrings= { German } { Timeout Be%20prepared%20... } Inaktiv Achtung%20... // Localized user messages
System:Core%20Connections string ApplicationPort= 61986 4200 1024 65535 // the Application module's listening port
System:Core%20Connections string ApplicationIP= 129.101.53.72 127.0.0.1 % % // the Application module's listening IP
System:Configuration matrix ApplicationVersion= { Framework Revision Build } 1 3.0.5 % Mar%2018%202016%2012:16:49 // Application version information
System:Configuration matrix ApplicationFilterChain= 4 { Filter%20Name Position%20String } ConnectorInput 2.9999 FingerTask 3 KeystrokeFilter 3.1 ConnectorOutput 3.9999 // Application filter chain
System:Randomization int RandomSeed= 8163 0 % % // seed for the BCI2000 pseudo random number generator
System:Randomization int RandomizationWarning= 1 1 0 1 // warn if subsequent Runs have identical RandomSeed value (boolean)
System:State%20Vector int StateVectorLength= 24 16 % % // length of the state vector in bytes
